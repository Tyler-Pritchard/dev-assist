import logging
from utils.model_loader import ModelLoader

class CodeAnalysisService:
    def __init__(self):
        # Initialize the model loader with the desired model
        self.model_loader = ModelLoader("CodeParrot/codeparrot-small")  # Replace with optimal code analysis model
        self.device = self.model_loader.device
        self.model, self.tokenizer = self.model_loader.get_model()

    def analyze_code(self, code: str) -> str:
        """
        Analyze the given code for insights.

        Args:
            code (str): The code snippet to analyze.

        Returns:
            str: Analysis results.
        """
        try:
            logging.info("Analyzing code input")
            prompt = f"""
            You are a professional Python code reviewer. Analyze the following function and provide:
            - Errors or potential bugs in the function.
            - Specific improvements (e.g., type annotations, input validation, naming conventions).
            - Assessment of adherence to Python best practices (readability, efficiency, clarity).
            Only analyze the given function. Avoid generating unrelated code or testing scenarios.
            Function:
            {code}
            """
            # Encode the input
            input_ids = self.tokenizer.encode(prompt, return_tensors="pt").to(self.device)
            
            # Generate the analysis
            output = self.model.generate(
                input_ids,
                max_new_tokens=100,
                pad_token_id=self.tokenizer.pad_token_id,
                length_penalty=1.5,
                num_beams=4,
                temperature=0.7,
                top_p=0.85,
                repetition_penalty=2.5,  # Higher penalty for repeated patterns
                early_stopping=True
            )
            # Decode and clean the analysis result
            analysis = self.tokenizer.decode(output[0], skip_special_tokens=True)
            processed_analysis = self._clean_analysis_output(analysis)
            logging.info(f"Cleaned analysis result: {processed_analysis}")
            return processed_analysis.strip()
        except Exception as e:
            logging.error(f"Error analyzing code: {e}")
            return "Error analyzing code."

    def _clean_analysis_output(self, output: str) -> str:
        """
        Cleans the generated analysis output by removing duplicates and artifacts.

        Args:
            output (str): The raw output generated by the model.

        Returns:
            str: Cleaned and formatted analysis output.
        """
        lines = output.split("\n")
        clean_lines = []
        seen_lines = set()
        for line in lines:
            line = line.strip()
            # Avoid duplicates and irrelevant lines
            if line and not line.startswith("self.") and line not in seen_lines:
                clean_lines.append(line)
                seen_lines.add(line)
        return "\n".join(clean_lines)
